        -:    0:Source:C:/Users/PC/CLionProjects/Data Structures and Algorithms/Tree.cpp
        -:    0:Graph:C:\Users\PC\CLionProjects\Data Structures and Algorithms\cmake-build-debug-coverage\CMakeFiles\For_Trying.dir\Tree.cpp.gcno
        -:    0:Data:C:\Users\PC\CLionProjects\Data Structures and Algorithms\cmake-build-debug-coverage\CMakeFiles\For_Trying.dir\Tree.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by PC on 7/24/2023.
        -:    3://
        -:    4:
        -:    5:#include "Tree.h"
        -:    6:#include <iostream>
        -:    7:using namespace std;
        -:    8:#include <algorithm>
        -:    9:#include <limits>
        -:   10:
function _ZN4Tree6insertEi called 0 returned 0% blocks executed 0%
    #####:   11:void Tree::insert(int item) {
    #####:   12:    if (root == nullptr) {
    %%%%%:   12-block  0
branch  0 never executed
branch  1 never executed
    #####:   13:        root = new Node(item);
    %%%%%:   13-block  0
call    0 never executed
call    1 never executed
    #####:   14:        return;
        -:   15:    }
    #####:   16:    auto current = root;
    %%%%%:   16-block  0
        -:   17:    while (true) {
    #####:   18:        if (current->value > item) {
    %%%%%:   18-block  0
branch  0 never executed
branch  1 never executed
    #####:   19:            if (current->left_child == nullptr) {
    %%%%%:   19-block  0
branch  0 never executed
branch  1 never executed
    #####:   20:                current->left_child = new Node(item);
    %%%%%:   20-block  0
call    0 never executed
call    1 never executed
    #####:   21:                break;
        -:   22:            }
    #####:   23:            current = current->left_child;
    %%%%%:   23-block  0
        -:   24:        } else {
    #####:   25:            if (current->right_child == nullptr) {
    %%%%%:   25-block  0
branch  0 never executed
branch  1 never executed
    #####:   26:                current->right_child = new Node(item);
    %%%%%:   26-block  0
call    0 never executed
call    1 never executed
    #####:   27:                break;
        -:   28:            }
    #####:   29:            current = current->right_child;
    %%%%%:   29-block  0
        -:   30:        }
        -:   31:    }
        -:   32:
        -:   33:}
        -:   34:
function _ZN4Tree4findEi called 0 returned 0% blocks executed 0%
    #####:   35:int Tree::find(int item) {
    #####:   36:    auto current = root;
    #####:   37:    while (current != nullptr) {
    %%%%%:   37-block  0
    %%%%%:   37-block  1
branch  0 never executed
branch  1 never executed
    #####:   38:        if (item > current->value)
    %%%%%:   38-block  0
branch  0 never executed
branch  1 never executed
    #####:   39:            current = current->right_child;
    %%%%%:   39-block  0
    #####:   40:        else if (item < current->value)
    %%%%%:   40-block  0
branch  0 never executed
branch  1 never executed
    #####:   41:            current = current->left_child;
    %%%%%:   41-block  0
        -:   42:        else
    #####:   43:            return true;
    %%%%%:   43-block  0
        -:   44:    }
    #####:   45:    return false;
    %%%%%:   45-block  0
        -:   46:}
        -:   47:
function _ZN4Tree34traverse_post_order_implementationEPNS_4NodeE called 0 returned 0% blocks executed 0%
    #####:   48:void Tree::traverse_post_order_implementation(Tree::Node *root) {
    #####:   49:    if (root == nullptr) return;
    %%%%%:   49-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   49-block  1
    #####:   50:    cout << root->value << "\n";
    %%%%%:   50-block  0
call    0 never executed
call    1 never executed
    #####:   51:    traverse_post_order_implementation(root->left_child);
call    0 never executed
    #####:   52:    traverse_post_order_implementation(root->right_child);
call    0 never executed
        -:   53:}
        -:   54:
function _ZN4Tree19traverse_post_orderEv called 0 returned 0% blocks executed 0%
    #####:   55:void Tree::traverse_post_order() {
    #####:   56:    traverse_post_order_implementation(root);
    %%%%%:   56-block  0
call    0 never executed
    #####:   57:}
        -:   58:
function _ZN4Tree6heightEPNS_4NodeE called 0 returned 0% blocks executed 0%
    #####:   59:int Tree::height(Node* root) {
    #####:   60:    if (root->left_child == nullptr && root->right_child == nullptr)
    %%%%%:   60-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   60-block  1
branch  2 never executed
branch  3 never executed
    #####:   61:        return 0;
    %%%%%:   61-block  0
        -:   62:
    #####:   63:    return 1 + max(height(root->left_child), height(root->right_child));
    %%%%%:   63-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   63-block  1
call    4 never executed
        -:   64:
        -:   65:}
        -:   66:
function _ZN4Tree6heightEv called 0 returned 0% blocks executed 0%
    #####:   67:int Tree::height() {
    #####:   68:    return height(root);
    %%%%%:   68-block  0
call    0 never executed
        -:   69:}
        -:   70:
function _ZN4Tree6equalsES_ called 0 returned 0% blocks executed 0%
    #####:   71:bool Tree::equals(Tree other) {
    #####:   72:    return equals(other.root, root);
    %%%%%:   72-block  0
call    0 never executed
        -:   73:}
        -:   74:
function _ZN4Tree6equalsEPNS_4NodeES1_ called 0 returned 0% blocks executed 0%
    #####:   75:bool Tree::equals(Tree::Node* first, Tree::Node* second) {
    #####:   76:    return first->value == second->value && equals(first->right_child, second->right_child) &&
    %%%%%:   76-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   76-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   76-block  2
    %%%%%:   76-block  3
    #####:   77:           equals(first->left_child, second->left_child);
    %%%%%:   77-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   77-block  1
        -:   78:
        -:   79:}
        -:   80:
function _ZN4Tree21is_binary_search_treeEv called 0 returned 0% blocks executed 0%
    #####:   81:bool Tree::is_binary_search_tree() {
    #####:   82:    return is_binary_search_tree(root, numeric_limits<int>::min(), numeric_limits<int>::max());
    %%%%%:   82-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:   83:}
        -:   84:
function _ZN4Tree21is_binary_search_treeEPNS_4NodeEii called 0 returned 0% blocks executed 0%
    #####:   85:bool Tree::is_binary_search_tree(Tree::Node *root, int min, int max) {
    #####:   86:    if (root == nullptr)
    %%%%%:   86-block  0
branch  0 never executed
branch  1 never executed
    #####:   87:        return true;
    %%%%%:   87-block  0
        -:   88:
    #####:   89:    if (root->value < min || root->value > max)
    %%%%%:   89-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   89-block  1
branch  2 never executed
branch  3 never executed
    #####:   90:        return false;
    %%%%%:   90-block  0
        -:   91:
    #####:   92:    return is_binary_search_tree(root->left_child, min, root->value - 1) &&
    %%%%%:   92-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   92-block  1
    %%%%%:   92-block  2
    #####:   93:           is_binary_search_tree(root->right_child, root->value + 1, max);
    %%%%%:   93-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   93-block  1
        -:   94:}
        -:   95:
function _ZN4Tree16print_nodes_at_kEi called 0 returned 0% blocks executed 0%
    #####:   96:void Tree::print_nodes_at_k(int k) {
    #####:   97:    print_nodes_at_k_implementation(root, k);
    %%%%%:   97-block  0
call    0 never executed
    #####:   98:}
        -:   99:
function _ZN4Tree31print_nodes_at_k_implementationEPNS_4NodeEi called 0 returned 0% blocks executed 0%
    #####:  100:void Tree::print_nodes_at_k_implementation(Node* root, int k) {
    #####:  101:    if (root == nullptr) return;
    %%%%%:  101-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  101-block  1
        -:  102:
    #####:  103:    if (k == 0) {
    %%%%%:  103-block  0
branch  0 never executed
branch  1 never executed
    #####:  104:        cout << root->value << "\n";
    %%%%%:  104-block  0
call    0 never executed
call    1 never executed
    #####:  105:        return;
        -:  106:    }
        -:  107:
    #####:  108:    print_nodes_at_k_implementation(root->left_child, k-1);
    %%%%%:  108-block  0
call    0 never executed
    #####:  109:    print_nodes_at_k_implementation(root->right_child, k-1);
call    0 never executed
        -:  110:}
